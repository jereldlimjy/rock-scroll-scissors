import { ethers } from 'ethers';
import gameAbi from './gameAbi.json' assert { type: 'json' };
import * as dotenv from 'dotenv';
import { toBytes } from 'viem';

dotenv.config();

const GAME_CONTRACT_ADDRESS = '0x5d74934e293efd8be4fdea0069664a9a6bbf068c';
const proof =
  '0x0ac1fc55b8fb65613721f84afc588456b6983baefb07d7bad072ee1b1822d37c2351b1fd25595818c743311d6f6bdaf7cbeeddf39bd51a15bcb969eb50eebbb324ced506d2cd85704dbd838b03d37528877dee185041c75f8d806fd3646189702283ba978fcdcb62fb4f9f111aa589bdfdb61dc191f1905f45d7fb894b1eb4242dfce1802c1ceb93af3e108c7e3c31ba8a8799e70544dba579d8ccfbb89c21cc2b064e9e2cf71d125e7ead6475b47e0bbd55ac00d35b76bd745331c706b55f6f1f0d1a4739e8fff88bcc5a8b6bef2461222f31bfa5a51b27865ec85cfeb63e5b00b1a0d67388c0e17032a436a8994dfd9ec608141ce10ccbf82a7381a43ff1c405b6264d3df9c3e1d920ae09f51657746db7511b825afd28994425d3b738f0ae1ad2f643d12b62e9615dd8b4d440310a5d56904292ed7d8e0f4ff10db698a40a0d07a8c714fb20ee41a45be483dd4cfa0665cdc3629739cacf18d2dcb53c0b13248b8ee8cba450f50fca43bb629947e2a0ea021ed9168816c1660d2a7216945e055dfd329b00188a862fc838c58a02f1c3caef94010a7708d5caf20e3b370ce30cb7d2702da608a606bc28e6daa8c65354d38d5c62021c5f6545a6d5d1016a0e2579aebe135bb07655a6648b491628fcaab1523a10c7ce437101bd66148145f22d35158a0039f693ffbcd026d3c1bcd90945383e4e6469441648161c8a8b129a2512ca56e32174bbcd6fa9c3d8cc8dddb1edf115cdd9eab99df36011314d75b0078614590d91c594e0076b62cfdaa8a6b0190c08f446260adf99f707d56aabf01b83d618c6d363bc540f29f9234206b96c1c99f3430b14e824326565e401d07a022cd8d0753ce3f57293ea86331f1fb4a4f70a91469901a037ab96c2b579fbe70c3d53bece73373503d11cd17700b921fffe296f57cbdc425f82a858bfbae10f03411e86c2c48f03db4aa626443361cd89e14bc434f62e40fbd5b08972623cf3244767de7bc6365adba73fd042321254092c10ea238b157e1d14fad6f71bf04a254367daa6922695951fd77a5c942f1f000d68ae1b378371664bfde52b3a9e042b9efe545d7b3c5575180ef42d5c08a32ff948e9253aee70a5252a6b681aeec9245b0164230eb114ca28a83a04bd3479831332e30a8c04963a2c93787113c8461be9eada2c1960848574437a96fdb38d501ebd590a496e580e34df5ee83ae7c3083cd54da153e2ba7f27cd6c8d4195296728bb8f53b6eba0b85c674a2144aa7f27fbc334f1ce0d45b09480f87bf146210df761dbf193300cb39f2db38593b1f318ebe6e105c544835e4524b6a342da153b12a1b6c175c68a48292acffbfa80082ab5377edabe4d64e27a15d8110e19ecc2c16cebc075729b6739444f8701e00b2f2b8d7e5673e64fbe475441f5585b391f661520fa2ef4d421d9b3eb3d146a662c181bf6f9f6b960bef8e494f4dfdf2cccf1512120e1507d2f22fc5c4b9187a81bf780e93340510211acf709868ed4d038f205fa9321cf64134d20f1575688b32c40c44c4f82ca07703df75ead1bdf5e2db9e4f13828268bb60b2358919b0cca1675e90305b04183fdd4e8e01f8685ee50654e9bffbf57ffe9d735cddcaf7d9705eec14137569dc555c52d29192e715fc590dfad011f2a2ec6362228a610eaf121cd65d6ddad4a512d0f4a52ca9bd02b7009b52ed854e1f33d7325579f948d8a202e6870329e961cabcf2e6428108825e9cc21487110d21a92117ffb96a50f0b2928318ee7b01d4f7a2b5bac25b1f053e47fefe2820c7a943ed5363ffc64bee10403acacc390e4d897389d61989052f872c8413537551aa039f275978a817eae21dfa0a09aa6771c651b242e9e582993a7512a9f4814707462cdb3359626ac0d2abfd44f1a05c12303d74ebe0c217d9aa0de2a2cec50c7dd788e11d3a87a613422fd1beabb9181b6b78fd0f8e1d66335459f0a6c1c5e5e7873f4facec791028612183649a6da6ce749969a8691a0ee1ed121104d4e053b1548814eba7aaebd222984ebc35e3d290a7ce1c1eaa4627016d18f51e2d6376fb4a32cd94b2182f61a170e3eb72c27f82ef76008d80b072b6a102fd6ffa1055e0e02c75a165fea53e71c6b679c5cd6ea6b1c0d23de30a09a1eecd48309c169de55b7c626b9bdbb901227d80bc825426ed6fca18c58faed0bfbc3b5a1d6ff89edcb9275f4aaee6e11280534041398465f75dc1f4a6f4f51207de9d4e6ca5f61a647c2a0580ab72ca4ac2d5beb7bf4b361a86638ba7313ba6be813ee61f20c9996e972dd1dc75d8f681d2a050247c37d3475f5ce34aa4ad54d08bc8ad7f0ec8f5b7dd6e6d18819b749f401615aba2d21f70c59d41f50f11c8f76756833a1c2ece030e83e6cf344d621bf23205a9329e72aff8583a512b33138d565ef1321b96c43615f5837063bddfedf21a4448c45eb8107f422048ba34faa1cc8af175349a482a414e32125c6ac0fff12e8b3168c18b0e7c0f6530574a35e2d956bcc7283d960e34490263b89997edd1bcc9f2b2835abb5f16b0c1d568b4c22d155275aaa366152e3d18ccd41abc0b308bfb543263e26c9843f2468899614df546665a9228a4b62776dd064eee947d724d36c667bd2042a995e3d4abec63bace4621f2646ace25cd193a0c2699c2a172cb6543b2f6d36687acac8a3e455cb0926eb16c96e25c1a5d7d4079b98735e810dac99446a1ce1997ed2ba5940ffe16732fa7affa2d251dc91b8fcd5a79232071ad74f4d6d4c6e4e3fda26c4a83fc40d07333d17220c4e90174fd98e61839f470980c53f497efcd7c162273ea82690cc365e7cbde634c8739d9c1082530ce94504e3e0387f66e601b105d1b72fa455130e4c0af49ef6e0313149b240ccc2ab0f0a8dde02a0bd33d5d491b83c837cccaf3c2548a458e265cd99318141ed2be952138bc7c118c42eec1b4987ef905330d4d4d6b37b0a93b722481283790c0e060d041b8b3591a44e3686fcf6242a934f8d50c7cd9e51df041b770811c0b99d8ca0';

async function main() {
  const provider = new ethers.JsonRpcProvider(process.env.SEPOLIA_RPC_URL ?? '');
  const wallet = new ethers.Wallet(process.env.SEPOLIA_DEPLOYER_PRIVATE_KEY ?? '', provider);
  const gameContract = new ethers.Contract(GAME_CONTRACT_ADDRESS, gameAbi.abi, wallet);

  // try create game
  try {
    // const createGameTx = await gameContract.createGame(
    //   '0x8B151eBF6Ca9D3b5Bfdd1Eeb0b4F3e792B5061D9',
    //   proof,
    //   ethers.hexlify(
    //     new Uint8Array([164, 199, 107, 150, 250, 211, 182, 180, 65, 233, 45, 168, 6, 3, 227, 17, 47, 83, 41, 175, 90, 33, 72, 6, 223, 132, 232, 221, 222, 244, 170, 181]),
    //   ),
    //   [
    //     '0x0000000000000000000000000000000000000000000000000000000000000044',
    //     '0x00000000000000000000000000000000000000000000000000000000000000bd',
    //     '0x000000000000000000000000000000000000000000000000000000000000007a',
    //     '0x00000000000000000000000000000000000000000000000000000000000000e6',
    //     '0x000000000000000000000000000000000000000000000000000000000000000f',
    //     '0x0000000000000000000000000000000000000000000000000000000000000047',
    //     '0x000000000000000000000000000000000000000000000000000000000000008f',
    //     '0x00000000000000000000000000000000000000000000000000000000000000ae',
    //     '0x0000000000000000000000000000000000000000000000000000000000000010',
    //     '0x0000000000000000000000000000000000000000000000000000000000000061',
    //     '0x00000000000000000000000000000000000000000000000000000000000000e1',
    //     '0x000000000000000000000000000000000000000000000000000000000000001a',
    //     '0x0000000000000000000000000000000000000000000000000000000000000077',
    //     '0x0000000000000000000000000000000000000000000000000000000000000039',
    //     '0x00000000000000000000000000000000000000000000000000000000000000f4',
    //     '0x00000000000000000000000000000000000000000000000000000000000000b9',
    //     '0x000000000000000000000000000000000000000000000000000000000000004d',
    //     '0x000000000000000000000000000000000000000000000000000000000000001d',
    //     '0x00000000000000000000000000000000000000000000000000000000000000af',
    //     '0x0000000000000000000000000000000000000000000000000000000000000091',
    //     '0x0000000000000000000000000000000000000000000000000000000000000079',
    //     '0x0000000000000000000000000000000000000000000000000000000000000082',
    //     '0x00000000000000000000000000000000000000000000000000000000000000d3',
    //     '0x000000000000000000000000000000000000000000000000000000000000003b',
    //     '0x000000000000000000000000000000000000000000000000000000000000006f',
    //     '0x00000000000000000000000000000000000000000000000000000000000000c8',
    //     '0x00000000000000000000000000000000000000000000000000000000000000a0',
    //     '0x000000000000000000000000000000000000000000000000000000000000001a',
    //     '0x0000000000000000000000000000000000000000000000000000000000000063',
    //     '0x00000000000000000000000000000000000000000000000000000000000000f8',
    //     '0x000000000000000000000000000000000000000000000000000000000000009c',
    //     '0x0000000000000000000000000000000000000000000000000000000000000021',
    //   ],
    // );
    // const createGameTxReceipt = await createGameTx.wait();

    console.log(
      ethers.hexlify(
        new Uint8Array([
          164, 199, 107, 150, 250, 211, 182, 180, 65, 233, 45, 168, 6, 3, 227, 17, 47, 83, 41, 175,
          90, 33, 72, 6, 223, 132, 232, 221, 222, 244, 170, 181,
        ]),
      ),
    );

    console.log('create game receipt:', createGameTxReceipt);
  } catch (err) {
    console.error(err.message);
  }

  // try resolve game
  // try {
  //   const resolveGameTx = await gameContract.resolveGame(0, 2, 70);
  //   const resolveGameTxReceipt = await resolveGameTx.wait();
  //   console.log('resolve game receipt:', resolveGameTxReceipt);
  // } catch (err) {
  //   console.error(err);
  // }
}

main().catch(err => {
  console.error(err);
});
